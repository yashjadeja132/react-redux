// Import the createSlice function from Redux Toolkit to create a slice of state with
// its own reducers and actions in a concise way.
import { createSlice } from "@reduxjs/toolkit";

// Import the fetchUserData async action. This is an example of a thunk action,
// typically created using createAsyncThunk, which handles asynchronous logic like API calls.
import { fetchUserData } from "../actions/userActions";

// Create a slice of state for "user". A slice includes the initial state, reducers,
// and logic for handling additional actions (extraReducers).
const userSlice = createSlice({
  // The name of this slice. This will be used as a namespace in actions and state.
  name: "user",

  // The initial state for this slice, defining its structure and default values.
  initialState: {
    user: null, // Stores user information after it is successfully fetched.
    loading: false, // Indicates if a request is in progress.
    error: null, // Stores error messages if a request fails.
  },

  // Reducers would go here if there were any synchronous updates specific to this slice.
  // Since this slice relies entirely on async actions, the `reducers` field is empty.
  reducers: {},

  // Handle actions generated by async thunks or other reducers using extraReducers.
  extraReducers: (builder) => {
    // Handle the pending state of fetchUserData (when the async request starts).
    builder.addCase(fetchUserData.pending, (state) => {
      state.loading = true; // Set loading to true to indicate an in-progress request.
      state.error = null; // Clear any previous error state.
    });

    // Handle the fulfilled state of fetchUserData (when the async request succeeds).
    builder.addCase(fetchUserData.fulfilled, (state, action) => {
      state.loading = false; // Set loading to false as the request is complete.
      state.user = action.payload; // Update the user state with the fetched data.
    });

    // Handle the rejected state of fetchUserData (when the async request fails).
    builder.addCase(fetchUserData.rejected, (state, action) => {
      state.loading = false; // Set loading to false as the request is complete.
      state.error = action.error.message; // Store the error message in the state.
    });
  },
});

// Export the reducer function generated by createSlice. This will be used in the store
// to manage the "user" slice of the state.
export default userSlice.reducer;
